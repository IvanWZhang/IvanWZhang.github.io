<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 13. Roman to Integer</title>
    <url>/2020/03/13/13.%20Roman%20to%20Integer/</url>
    <content><![CDATA[<h1 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h1><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span></pre></td></tr><tr><td class="code"><pre><span class="line">I             1</span></pre></td></tr><tr><td class="code"><pre><span class="line">V             5</span></pre></td></tr><tr><td class="code"><pre><span class="line">X             10</span></pre></td></tr><tr><td class="code"><pre><span class="line">L             50</span></pre></td></tr><tr><td class="code"><pre><span class="line">C             100</span></pre></td></tr><tr><td class="code"><pre><span class="line">D             500</span></pre></td></tr><tr><td class="code"><pre><span class="line">M             1000</span></pre></td></tr></table></figure>
<p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1994</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Using the <code>key-value</code> of <strong><em>dict()</em></strong> to realize the hashmap:</p>
<p><strong>Note:</strong></p>
<ul>
<li><p>If the left symbol’s value smaller than right one, means subtraction.</p>
</li>
<li><p>Else, add the value to the result.</p>
</li>
</ul>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># use dict as the hashmap</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        dic = &#123;<span class="string">'I'</span>:<span class="number">1</span>,<span class="string">'V'</span>:<span class="number">5</span>,<span class="string">'X'</span>:<span class="number">10</span>,<span class="string">'L'</span>:<span class="number">50</span>,<span class="string">'C'</span>:<span class="number">100</span>,<span class="string">'D'</span>:<span class="number">500</span>,<span class="string">'M'</span>:<span class="number">1000</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res_Int = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(s)<span class="number">-1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> dic[s[index]] &lt; dic[s[index+<span class="number">1</span>]]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res_Int -= dic[s[index]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res_Int += dic[s[index]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> res_Int + dic[s[<span class="number">-1</span>]] <span class="comment"># add the last one</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>Using <code>enumerate()</code> to simplified the code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        dic = &#123;<span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"M"</span>: <span class="number">1000</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        num = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i, r <span class="keyword">in</span> enumerate(s):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> dic[r] &gt;= dic[s[i+<span class="number">1</span>]]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    num += dic[r]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    num -= dic[r]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span> IndexError:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> num + dic[r]</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 23. Merge k Sorted Lists</title>
    <url>/2020/03/12/23.%20Merge%20k%20Sorted%20Lists/</url>
    <content><![CDATA[<h1 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h1><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1-&gt;4-&gt;5,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1-&gt;3-&gt;4,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  2-&gt;6</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Using build-in <em>sorting algorithm</em></p>
<p><strong>Note:</strong></p>
<p><code>sort()</code>：sort 是应用在 list 上的方法；list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值。</p>
<p><code>sorted</code>：sorted 可以对所有可迭代的对象进行排序操作；sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        allnodes = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = point = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> l:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                allnodes.append(l.val)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l = l.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> sorted(allnodes):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            point.next = ListNode(x)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            point = point.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(nlogn)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
<p>Btw, it is the fastest one.</p>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two:"></a>Solution Two:</h2><p><em>Divide and Conquer Strategy</em></p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        amount = len(lists)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        interval = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> interval &lt; amount:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, amount - interval, interval * <span class="number">2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lists[i] = self.mergeTwoLists(lists[i], lists[i + interval])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            interval *= <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>] <span class="keyword">if</span> amount &gt; <span class="number">0</span> <span class="keyword">else</span> lists</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = ListNode(<span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tail = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail.next = l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1 = l1.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail.next = l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l2 = l2.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail = tail.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> l1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail.next = l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail.next = l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(nlogk)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>Simulate <em>divide-and-conquer</em> with queues</p>
<p><strong>Note:</strong></p>
<p>Actually, it will increase the complexity due to the repeated calculation of the first few lists.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> len(lists) == <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> len(lists) &gt; <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l1 = lists.pop(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l2 = lists.pop(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lists.append(self.mergeTwoLists(l1, l2))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = ListNode(<span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tail = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail.next = l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1 = l1.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail.next = l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l2 = l2.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail = tail.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> l1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail.next = l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail.next = l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(nlogk)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three:"></a>Solution Three:</h2><p>Using the PriorityQueue to made it.</p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> PriorityQueue</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = point = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q = PriorityQueue()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> l:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                q.put((l.val, l))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span></pre></td></tr><tr><td class="code"><pre><span class="line">            val, node = q.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            point.next = ListNode(val)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            point = point.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node = node.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> node:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                q.put((node.val, node))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next</span></pre></td></tr></table></figure>
<h3 id="Modified-1"><a href="#Modified-1" class="headerlink" title="Modified"></a>Modified</h3><p>However, the codes up there can not pass the OJ due to the unidentifiable <code>Queue</code>, so after modified and using python style:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        k = len(lists)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = ListNode(<span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tail = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pq = PriorityQueue(k)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        n = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> lists[i]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pq.put((lists[i].val, n, lists[i]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> len(pq.queue) != <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            _, _, node = pq.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            post = node.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> post:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pq.put((post.val, n, post))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail.next = node</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail = tail.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(nlogk)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 19. Remove Nth Node From End of List</title>
    <url>/2020/03/11/19.%20Remove%20Nth%20Node%20From%20End%20of%20List/</url>
    <content><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h1><p>Given a linked list, remove the <em>n-th</em> node from the end of list and return its head.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IGiven linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span></pre></td></tr></table></figure>
<p><strong>Note</strong>:</p>
<p>Given n will always be valid.</p>
<p><strong>Follow up</strong>:</p>
<p>Could you do this in one pass?</p>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p><strong>Two Pass</strong></p>
<ul>
<li>Count the total number</li>
<li>find the ‘break-point’ </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur, num = head, <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> cur.next:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            num = num + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        no = num - n</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> no &lt; <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> no &gt; <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">                no -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next = cur.next.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two:"></a>Solution Two:</h2><p><strong>One Pass</strong></p>
<ul>
<li>Using tow pointers to create a <em>n-length</em> gap</li>
<li>Moving tow pointers together until the further one reach the end</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        root = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        root.next = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        left = right = root</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> n:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            right = right.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            n -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> right.next:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            right = right.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            left = left.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        left.next = left.next.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> root.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three:"></a>Solution Three:</h2><p>Using <strong>recursive</strong> method</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">global</span> i </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        head.next = self.removeNthFromEnd(head.next, n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next <span class="keyword">if</span> i == n <span class="keyword">else</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2. Add Two Numbers</title>
    <url>/2020/03/10/2.%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<h1 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h1><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 7 -&gt; 0 -&gt; 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: 342 + 465 &#x3D; 807.</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Direct implementation, the flag is used to depict the carry for the highest position.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        newNode = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = newNode</span></pre></td></tr><tr><td class="code"><pre><span class="line">        flag = <span class="number">0</span>  <span class="comment"># the carry</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> l1.val &gt;= <span class="number">0</span> <span class="keyword">or</span> l2.val &gt;= <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x = l1.val <span class="keyword">if</span> l1.val &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            y = l2.val <span class="keyword">if</span> l2.val &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            sum = x + y + flag</span></pre></td></tr><tr><td class="code"><pre><span class="line">            flag = sum // <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            newNode.val = sum % <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            l1 = l1.next <span class="keyword">if</span> l1.next <span class="keyword">else</span> ListNode(<span class="number">-1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l2 = l2.next <span class="keyword">if</span> l2.next <span class="keyword">else</span> ListNode(<span class="number">-1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> l1.val &gt;= <span class="number">0</span> <span class="keyword">or</span> l2.val &gt;= <span class="number">0</span> <span class="keyword">or</span> flag:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newNode.next = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newNode = newNode.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newNode.val = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>Faster than original one.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        newNode = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = newNode</span></pre></td></tr><tr><td class="code"><pre><span class="line">        flag = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            y = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            s = flag + x + y</span></pre></td></tr><tr><td class="code"><pre><span class="line">            flag = s // <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            newNode.next = ListNode(s % <span class="number">10</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newNode = newNode.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">None</span>):l1 = l1.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">None</span>):l2 = l2.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(flag &gt; <span class="number">0</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newNode.next = ListNode(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 141. Linked List Cycle</title>
    <url>/2020/03/09/141.%20Linked%20List%20Cycle/</url>
    <content><![CDATA[<h1 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a>141. Linked List Cycle</h1><p>Given a linked list, determine if it has a cycle in it.</p>
<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span></pre></td></tr></table></figure>
<p><strong>Example3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: false</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: There is no cycle in the linked list.</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Direct implementation</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> head.next <span class="keyword">and</span> head.val != <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head.val = <span class="literal">None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            head = head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head.next:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two:"></a>Solution Two:</h2><p>Tow pointers aka. <em>fast &amp; slow pointer</em> method.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span> <span class="keyword">or</span> head.next == <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fast, slow = head.next, head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> fast.next <span class="keyword">and</span> fast.next.next:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> fast == slow:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            fast = fast.next.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            slow = slow.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        slow = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fast = head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(slow != fast):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">None</span> <span class="keyword">or</span> fast.next == <span class="literal">None</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            fast = fast.next.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            slow = slow.next    </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three:"></a>Solution Three:</h2><p>Using <code>Hashmap</code> to solve the task.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(cur):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(hashmap.get(cur,<span class="number">0</span>) != <span class="number">0</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                hashmap[cur] = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
<h3 id="Modified-1"><a href="#Modified-1" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> head:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                _ = hashmap.pop(head)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                hashmap[head] = i</span></pre></td></tr><tr><td class="code"><pre><span class="line">                head = head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 83. Remove Duplicates from Sorted List</title>
    <url>/2020/03/08/83.%20Remove%20Duplicates%20from%20Sorted%20List/</url>
    <content><![CDATA[<h1 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a>83. Remove Duplicates from Sorted List</h1><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;2</span></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2-&gt;3-&gt;3</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;2-&gt;3</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>A traditional solution for ListNode question.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> cur.val == cur.next.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur.next = cur.next.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two:"></a>Solution Two:</h2><p>Using the <strong>Recursive-idea</strong> to solve the problem in anther way.</p>
<p>While the efficiency is not quite satisfying.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> head:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head.next = self.deleteDuplicates(head.next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> head.next <span class="keyword">if</span> head.next <span class="keyword">and</span> head.val == head.next.val <span class="keyword">else</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three:"></a>Solution Three:</h2><p>Two pointers style.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur = head.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        prev = head</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> cur.val == prev.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                prev.next = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                prev = prev.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity: $O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 21. Merge Two Sorted Lists</title>
    <url>/2020/03/07/21.%20Merge%20Two%20Sorted%20Lists/</url>
    <content><![CDATA[<h1 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Based on recursive idea to handle it.</p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l2.next = self.mergeTwoLists(l1, l2.next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> l2</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>Using python’s operators to simplify the code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">and</span> l2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1, l2 = l2, l1</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two:"></a>Solution Two:</h2><p>A traditional solution for ListNode.</p>
<p>The efficiency is not better than Solution One, btw.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#     def __init__(self, x):</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.val = x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#         self.next = None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = ListNode(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cur, cur1, cur2 = head, l1, l2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> cur1 <span class="keyword">and</span> cur2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> cur1.val &lt; cur2.val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur.next = cur1</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur1 = cur1.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur.next = cur2</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cur2 = cur2.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur = cur.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> cur1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next = cur1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">elif</span> cur2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next = cur2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> head.next</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 123. Best Time to Buy and Sell Stock III</title>
    <url>/2020/03/06/123.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20III/</url>
    <content><![CDATA[<h1 id="123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="123. Best Time to Buy and Sell Stock III"></a>123. Best Time to Buy and Sell Stock <strong>III</strong></h1><p>Say you have an array for which the $i^{th}$ element is the price of a given stock on day $i$.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p><strong>Note</strong>: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,3,5,0,0,3,1,4]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: Buy on day 4 (price &#x3D; 0) and sell on day 6 (price &#x3D; 3), profit &#x3D; 3-0 &#x3D; 3.</span></pre></td></tr><tr><td class="code"><pre><span class="line">             Then buy on day 7 (price &#x3D; 1) and sell on day 8 (price &#x3D; 4), profit &#x3D; 4-1 &#x3D; 3.</span></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span></pre></td></tr><tr><td class="code"><pre><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span></pre></td></tr><tr><td class="code"><pre><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span></pre></td></tr></table></figure>
<h2 id="Quotations"><a href="#Quotations" class="headerlink" title="Quotations:"></a>Quotations:</h2><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/" target="_blank" rel="noopener">Labuladong’s review</a> elaborates the core of related DP-tasks in detailed.</p>
<p>The main idea is <strong>using “state” to enumerate all possibilities</strong>.</p>
<p>In short, the <strong>state</strong> will be replaced by the DP-unit(i.e. $dp[i] = max(0, dp[i−1])$) and initial states should be added. Then, following the Top-Down rule, the algorithm enumerates all possibilities to find a result.</p>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>There are only three actions in this task:</p>
<ul>
<li>Buy</li>
<li>Sell</li>
<li>Stay: Hold/Pass</li>
</ul>
<p>And in this task, there are four ‘moments’ need to be analyzed:</p>
<ul>
<li>first_buy</li>
<li>first_sell</li>
<li>second_buy(if necessary)</li>
<li>second_sell(if necessary)</li>
</ul>
<p>Based on the idea of dynamic programming and trying to exhaust all possible situations, here are the codes：</p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Define the initial states</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Setting rational values before the 'real-processing'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        first_buy, first_sell = float(<span class="string">'-inf'</span>), <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        second_buy, second_sell = float(<span class="string">'-inf'</span>), <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Top-Down design ideas</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># max() selects whether 'remain the same' or 'take the action'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            second_sell = max(second_sell, second_buy + price)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            second_buy = max(second_buy, first_sell - price)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first_sell = max(first_sell, first_buy + price)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first_buy = max(first_buy, -price)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> second_sell</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 16. 3Sum Closest</title>
    <url>/2020/03/05/16.%203Sum%20Closest/</url>
    <content><![CDATA[<h1 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h1><p>Given an array <code>nums</code> of n integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [-1, 2, 1, -4], and target &#x3D; 1.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 &#x3D; 2).</span></pre></td></tr></table></figure>
<h2 id="Preliminary-Analysis"><a href="#Preliminary-Analysis" class="headerlink" title="Preliminary Analysis:"></a>Preliminary Analysis:</h2><p>This task is quite similar to the <a href="https://ivanwzhang.github.io/2020/03/04/15.%203Sum/" target="_blank" rel="noopener">LeetCode 15. 3Sum</a>, and could be applied with the same method.</p>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums.sort()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans, k = nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>], <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i, j = k + <span class="number">1</span>, len(nums) - <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> i &lt; j:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum = nums[k] + nums[i] + nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> abs(target-sum) &lt; abs(target-ans):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ans = sum</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> sum &lt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">elif</span> sum &gt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> ans</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two"></a>Solution Two</h2><p>Solution one is not <strong><em>quite efficient</em></strong>, so……</p>
<p>Adding some marginal condition judgments to optimize the algorithm.</p>
<p>In specific, every time before doing the <code>While-loop</code>, using the marginal(nearby) result to test the target. Hence, it would reduce the calculation amount.</p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums.sort()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans, n = float(<span class="string">'inf'</span>), len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n<span class="number">-2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[k] == nums[k<span class="number">-1</span>]: <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            i, j = k+<span class="number">1</span>, n<span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># Add some marginal condition judgments to optimize the algorithm.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># From there</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            min_value = nums[k] + nums[i] + nums[i+<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> min_value &gt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> abs(min_value - target) &lt; abs(ans - target):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ans = min_value</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            max_value = nums[k] + nums[j<span class="number">-1</span>] + nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> max_value &lt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> abs(max_value - target) &lt; abs(ans - target):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ans = max_value</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># To here</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># Also, change judgment order below</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> i &lt; j:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum = nums[k] + nums[i] + nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> sum == target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> target</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> abs(sum - target) &lt; abs(ans - target):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ans = sum</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> sum &lt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]: i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> sum &gt; target:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j+<span class="number">1</span>]: j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 15. 3Sum</title>
    <url>/2020/03/04/15.%203Sum/</url>
    <content><![CDATA[<h1 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h1><p>Given an array <code>nums</code> of n integers, are there elements a, b, c in <code>nums</code> such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note</strong>:</p>
<p>The solution set must not contain duplicate triplets.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [-1, 0, 1, 2, -1, -4],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">A solution set is:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [-1, 0, 1],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [-1, -1, 2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure>
<h2 id="Preliminary-Analysis"><a href="#Preliminary-Analysis" class="headerlink" title="Preliminary Analysis:"></a>Preliminary Analysis:</h2><p>It’s quit obvious that the array(nums) should be sorted before further action.</p>
<p>When the orderly sequence(witch is a ascending queue) is obtained, we can find the structures of the result are limited:</p>
<ol>
<li>neg. + neg. + pos.</li>
<li>neg. + 0 + pos.</li>
<li>neg. + pos. + pos.</li>
<li>0 + 0 + 0</li>
</ol>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>It can be found that with 0 as the boundary, the condition is not satisfied when the largest number is&gt; = 0 or the smallest number is &lt;= 0, and it is not true at the same time;<br>Meanwhile, by using <code>a =-(b + c)</code>, the task can be transformed from a three-variable problem to a (relative) <strong>anchor + bivariate</strong> problem. </p>
<p>It is another <strong>“dual pointer” method</strong> solvable task and required some modification.</p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><ul>
<li>当 nums[k] &gt; 0 ，break跳出判断</li>
<li>当 k &gt; 0且nums[k] == nums[k - 1]时，跳过此元素nums[k]（否则会有重复解）</li>
<li>当i &lt; j时循环计算s = nums[k] + nums[i] + nums[j]，并按照以下规则执行双指针移动：<ol>
<li>当s &lt; 0时，i += 1并跳过所有重复的nums[i]；</li>
<li>当s &gt; 0时，j -= 1并跳过所有重复的nums[j]；</li>
<li>当s == 0时，记录组合[k, i, j]至res，执行i += 1和j -= 1并跳过所有重复的nums[i]和nums[j]，防止记录重复。</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">3</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res,k = [],<span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums.sort()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[k] &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[k] == nums[k<span class="number">-1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            i, j = k + <span class="number">1</span>, len(nums) - <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> i &lt; j:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum = nums[k] + nums[i] + nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> sum &lt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">elif</span> sum &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    res.append([nums[k], nums[i], nums[j]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]: </span></pre></td></tr><tr><td class="code"><pre><span class="line">                        i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]: </span></pre></td></tr><tr><td class="code"><pre><span class="line">                        j -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> res</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two"></a>Solution Two</h2><p>Solution one’s time consuming is not satisfied. To enhance the performance, several build-in function are introduced.</p>
<p>By using an array bisection build-in algorithm: <a href="https://docs.python.org/3.7/library/bisect.html" target="_blank" rel="noopener">bisect</a> , can significant increasing speed. </p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        counts = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            counts[i] = counts.get(i, <span class="number">0</span>) + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums = sorted(counts)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> counts[num] &gt; <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> counts[num] &gt; <span class="number">2</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ans.append([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> -num * <span class="number">2</span> <span class="keyword">in</span> counts:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ans.append([num, num, <span class="number">-2</span> * num])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                two_sum = -num</span></pre></td></tr><tr><td class="code"><pre><span class="line">                left = bisect.bisect_left(nums, (two_sum - nums[<span class="number">-1</span>]), i + <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> nums[left: bisect.bisect_right(nums, (two_sum // <span class="number">2</span>), left)]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    j = two_sum - i</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> j <span class="keyword">in</span> counts <span class="keyword">and</span> j != i:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ans.append([num, i, j])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 27. Remove Element</title>
    <url>/2020/03/03/27.%20Remove%20Element/</url>
    <content><![CDATA[<h1 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a>27. Remove Element</h1><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [3,2,2,3], val &#x3D; 3,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 2.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Note that the order of those five elements can be arbitrary.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">int len &#x3D; removeDuplicates(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(nums[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        i = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[j] != val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums[i] = nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> i</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h2 id="Solution-Two"><a href="#Solution-Two" class="headerlink" title="Solution Two"></a>Solution Two</h2><p><code>i</code> and <code>L</code> traverse at most n steps. In this method, the number of assignments is equal to the number of elements to be deleted. Therefore, it is more efficient if there are few elements to be removed.</p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        i, L = <span class="number">0</span>, len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> i &lt; L:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[i] == val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums[i] = nums[L<span class="number">-1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                L -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> L</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>Using the <code>range()</code> to simplify the code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">range(start, stop[, step])</span></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[i]==val:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums.pop(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> len(nums)</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 26. Remove Duplicates from Sorted Array</title>
    <url>/2020/03/02/26.%20Remove%20Duplicates%20from%20Sorted%20Array/</url>
    <content><![CDATA[<h1 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a>26. Remove Duplicates from Sorted Array</h1><p>Given a sorted array nums, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a> such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a> with O(1) extra memory.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,2],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">int len &#x3D; removeDuplicates(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(nums[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Due to the restriction of  <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> algorithm, it seems that the <strong>Two-Pointers</strong>(two indicators) is the only capable method. </p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        L = len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> L <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> L</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i, j = <span class="number">0</span>, <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, L):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[i] != nums[j]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums[i] = nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1. Tow Sum</title>
    <url>/2020/03/01/1.%20Two%20Sum/</url>
    <content><![CDATA[<h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Using the List build-in function <code>index()</code> to solve the task.</p>
<p>Syntex:<code>list.index(x[, start[, end]])</code></p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> target-nums[i] <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i, nums.index(target-nums[i], i+<span class="number">1</span>)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> []</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        lens = len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        j=<span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,lens):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp = nums[:i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> temp:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                j = temp.index(target - nums[i])</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> j&gt;=<span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> [j,i]</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
<h2 id="Solution-Two："><a href="#Solution-Two：" class="headerlink" title="Solution Two："></a>Solution Two：</h2><p>By using <code>dict()</code> and <code>enumerate()</code> to realize the <strong>hash-method</strong> </p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap=&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> init,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashmap[num] = init</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j = hashmap.get(target - num)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> i!=j:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i,j]</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
<h3 id="Modified-1"><a href="#Modified-1" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i = hashmap.get(target-num)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> i <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i,j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashmap[num] = j</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three"></a>Solution Three</h2><p>Merely using <code>{}</code> without <code>enumerate()</code> to realize the <strong>hash-method</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: list, target: int)</span> -&gt; list:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            left = target - nums[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> left <span class="keyword">in</span> temp:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [temp[left], i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp[nums[i]] = i</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
