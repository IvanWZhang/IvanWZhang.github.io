<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 26. Remove Duplicates from Sorted Array</title>
    <url>/2020/03/02/26.%20Remove%20Duplicates%20from%20Sorted%20Array/</url>
    <content><![CDATA[<h1 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a>26. Remove Duplicates from Sorted Array</h1><p>Given a sorted array nums, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a> such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a> with O(1) extra memory.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,2],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span></pre></td></tr></table></figure>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">int len &#x3D; removeDuplicates(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(nums[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Due to the restriction of  <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> algorithm, it seems that the <strong>Two-Pointers</strong>(two indicators) is the only capable method. </p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        L = len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> L <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> L</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i, j = <span class="number">0</span>, <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, L):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> nums[i] != nums[j]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums[i] = nums[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1. Tow Sum</title>
    <url>/2020/03/01/1.%20Two%20Sum/</url>
    <content><![CDATA[<h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span></pre></td></tr></table></figure>
<h2 id="Solution-One"><a href="#Solution-One" class="headerlink" title="Solution One:"></a>Solution One:</h2><p>Using the List build-in function <code>index()</code> to solve the task.</p>
<p>Syntex:<code>list.index(x[, start[, end]])</code></p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> target-nums[i] <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i, nums.index(target-nums[i], i+<span class="number">1</span>)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> []</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        lens = len(nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        j=<span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,lens):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp = nums[:i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> temp:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                j = temp.index(target - nums[i])</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> j&gt;=<span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> [j,i]</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n^2)$</li>
<li>Space complexity:$O(n)$</li>
</ul>
<h2 id="Solution-Two："><a href="#Solution-Two：" class="headerlink" title="Solution Two："></a>Solution Two：</h2><p>By using <code>dict()</code> and <code>enumerate()</code> to realize the <strong>hash-method</strong> </p>
<h3 id="Original-1"><a href="#Original-1" class="headerlink" title="Original"></a>Original</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap=&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> init,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashmap[num] = init</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j = hashmap.get(target - num)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> i!=j:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i,j]</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
<h3 id="Modified-1"><a href="#Modified-1" class="headerlink" title="Modified"></a>Modified</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashmap = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j,num <span class="keyword">in</span> enumerate(nums):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i = hashmap.get(target-num)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> i <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [i,j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashmap[num] = j</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
<h2 id="Solution-Three"><a href="#Solution-Three" class="headerlink" title="Solution Three"></a>Solution Three</h2><p>Merely using <code>{}</code> without <code>enumerate()</code> to realize the <strong>hash-method</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: list, target: int)</span> -&gt; list:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            left = target - nums[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> left <span class="keyword">in</span> temp:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> [temp[left], i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp[nums[i]] = i</span></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(n)$</li>
<li>Space complexity:$O(n)/O(n^2)$</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
